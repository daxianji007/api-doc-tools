# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- '*'

name: $(SourceBranchName)-$(Date:yyyyMMdd)$(Rev:.r)

pool:
  vmImage: 'macos-latest'

variables:
  mdocPath: 'bin/$(buildConfiguration)'
  
steps:
- task: NuGetToolInstaller@1
  displayName: Install NuGet Tool

- task: Bash@3
  displayName: Run Unit and Integration Tests
  inputs:
    targetType: 'inline'
    script: 'make prepare all check CONFIGURATION=$(buildConfiguration)'

# Run SDL tools
- task: BinSkim@4
  displayName: Security - BinSkim
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  inputs:
    InputType: 'Basic'
    Function: 'analyze'
    AnalyzeTargetGlob: '$(Build.ArtifactStagingDirectory)\**.dll;$(Build.ArtifactStagingDirectory)\**.exe;'

- task: SdtReport@1
  displayName: Security - SdtReport
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  inputs:
    AllTools: false
    CredScan: true
    BinSkim: true
    ToolLogsNotFoundAction: 'Standard'

- task: PublishSecurityAnalysisLogs@2
  displayName: Security - Publish Scan Results
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  inputs:
    ArtifactName: 'CodeAnalysisLogs'
    ArtifactType: 'Container'
    AllTools: true
    ToolLogsNotFoundAction: 'Standard'

- task: PostAnalysis@1
  displayName: Security - PostAnalysis
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  inputs:
    AllTools: false
    CredScan: true
    BinSkim: true
    ToolLogsNotFoundAction: 'Standard'

- task: ArchiveFiles@2
  displayName: Archive mdoc Files
  inputs:
    rootFolderOrFile: '$(mdocPath)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/zips/mdoc-$(Build.BuildNumber).zip'
    replaceExistingArchive: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish mdoc Artifact'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/zips'
    ArtifactName: 'mdoc.Artifact'
- task: PowerShell@2
  name: 'mdocVersion'
  displayName: 'Checking remote and local version of mdoc'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  inputs:
    filePath: 'mdoc/CheckNugetPublish.ps1'

- task: NuGetCommand@2
  displayName: 'Create a NuGet package for mdoc'
  condition: eq(variables['mdocVersion.NeedUpdate'], true)
  inputs:
    command: 'pack'
    packagesToPack: 'mdoc/mdoc.nuspec'
